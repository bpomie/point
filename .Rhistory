trackloss_column = "TrackLoss",
aoi_columns = c('Animate','Inanimate'),
treat_non_aoi_looks_as_missing = TRUE
)
# subset to response window post word-onset
response_window_wr <- subset_by_window(datawr,
window_start_time = 15500,
window_end_time = 21000,
rezero = FALSE)
results <- results %>%
mutate(AOI = ifelse(tghit == 1, "target", ifelse(dthit == 1, "distractor", ifelse(tghit == 0 & dthit == 0, "else","TrackLoss")))) %>%
mutate(TrackLoss = ifelse(missingdata == 1, TRUE, FALSE)) %>%
mutate(Target = ifelse(tghit == 1, TRUE, FALSE)) %>%
mutate(Distractor = ifelse(dthit == 1, TRUE, FALSE)) %>%
mutate(timems = sample * 1000/60)
resultseyetr <- merge(results,attendancebeforetest, by=c("ID","trial","experiment")) %>%
filter(attendance == 1)
data <- make_eyetrackingr_data(resultseyetr,
participant_column = "ID",
trial_column = "trial",
time_column = "timems",
trackloss_column = "TrackLoss",
aoi_columns = c('Target','Distractor'),
treat_non_aoi_looks_as_missing = TRUE # rather false
)
# subset to response window post word-onset
response_window <- data
trackloss_clean <- trackloss_analysis(data = response_window_clean)
# analyze amount of trackloss by subjects and trials
(trackloss <- trackloss_analysis(data = response_window_wr))
# remove trials with > 25% of trackloss
response_window_clean_wr <- clean_by_trackloss(data = response_window, trial_prop_thresh = .25)
# create Target condition column
response_window_clean_wr$Target <- as.factor( ifelse(test = grepl('(Spoon|Bottle)', response_window_clean_wr$Trial),
yes = 'Inanimate',
no  = 'Animate') )
View(response_window_clean_wr)
datawr <- make_eyetrackingr_data(word_recognition,
participant_column = "ParticipantName",
trial_column = "Trial",
time_column = "TimeFromTrialOnset",
trackloss_column = "TrackLoss",
aoi_columns = c('Animate','Inanimate'),
treat_non_aoi_looks_as_missing = TRUE
)
# subset to response window post word-onset
response_window_wr <- subset_by_window(datawr,
window_start_time = 15500,
window_end_time = 21000,
rezero = FALSE)
# analyze amount of trackloss by subjects and trials
(trackloss <- trackloss_analysis(data = response_window_wr))
# remove trials with > 25% of trackloss
response_window_clean_wr <- clean_by_trackloss(data = response_window_wr, trial_prop_thresh = .25)
# create Target condition column
response_window_clean_wr$Target <- as.factor( ifelse(test = grepl('(Spoon|Bottle)', response_window_clean_wr$Trial),
yes = 'Inanimate',
no  = 'Animate') )
View(response_window_clean_wr)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window_clean, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "Animate"
)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window_clean_wr, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "Animate"
)
# visualize time results
plot(response_time, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
data <- make_eyetrackingr_data(resultseyetr,
participant_column = "ID",
trial_column = "trial",
time_column = "timems",
trackloss_column = "TrackLoss",
aoi_columns = c('Target','Distractor'),
treat_non_aoi_looks_as_missing = TRUE # rather false
)
# subset to response window post word-onset
response_window <- data
View(response_window)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window_clean_wr, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Animate"
)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window_clean, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Animate"
)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Animate"
)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "target"
)
str(data)
View(response_time)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Target"
)
# visualize time results
plot(response_time, predictor_column = "trialtype") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# visualize time results
plot(response_time, predictor_column = "trialtype") +
theme_light() +
coord_cartesian(ylim = c(0,1)) +
facet_wrap(. ~ experiment)
View(response_window)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Target"
)
# visualize time results
plot(response_time, predictor_column = "trialtype") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Target"
)
# visualize time results
plot(response_time_e1, predictor_column = "trialtype") +
theme_light() +
coord_cartesian(ylim = c(0,1))
View(response_time_e1)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
# aggregate across trials within subjects in time analysis
response_time <- make_time_sequence_data(response_window_clean_wr, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "Animate"
)
# visualize time results
plot(response_time, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
View(response_time)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
# subset to response window post word-onset
response_window <- data %>%
mutate(Target = trialtype)
### Visualize the time course
```{r}
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Target"
)
results <- results %>%
mutate(AOI = ifelse(tghit == 1, "target", ifelse(dthit == 1, "distractor", ifelse(tghit == 0 & dthit == 0, "else","TrackLoss")))) %>%
mutate(TrackLoss = ifelse(missingdata == 1, TRUE, FALSE)) %>%
mutate(ActedObj = ifelse(tghit == 1, TRUE, FALSE)) %>%
mutate(DistractorObj = ifelse(dthit == 1, TRUE, FALSE)) %>%
mutate(timems = sample * 1000/60)
resultseyetr <- merge(results,attendancebeforetest, by=c("ID","trial","experiment")) %>%
filter(attendance == 1)
data <- make_eyetrackingr_data(resultseyetr,
participant_column = "ID",
trial_column = "trial",
time_column = "timems",
trackloss_column = "TrackLoss",
aoi_columns = c('ActedObj','DistractorObj'),
treat_non_aoi_looks_as_missing = TRUE # rather false
)
# subset to response window post word-onset
response_window <- data %>%
mutate(Target = trialtype)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("trialtype"),
aois = "Target"
)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | Trial) + (1 + ot1 | ParticipantName),
data = response_time_e1, REML = FALSE)
library(lme4)
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | Trial) + (1 + ot1 | ParticipantName),
data = response_time_e1, REML = FALSE)
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
broom::tidy(model_time_sequence, effects = "fixed")
library(lme4)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
broom::tidy(model_time_sequence, effects = "fixed")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
library(lme4)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
broom::tidy(model_time_sequence, effects = "fixed")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
View(model_time_sequence)
summary(model_time_sequence)
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
library(lme4)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
broom::tidy(model_time_sequence, effects = "fixed")
library(lme4)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
#broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | Trial) + (1 | ParticipantName),
data = response_time, REML = FALSE)
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | trial) + (1 | ID),
data = response_time_e1, REML = FALSE)
# commented out because this many random slopes takes too long to fit for a vignette
# model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) +
#                               (1 + ot1 + ot2 + ot3 + ot4 | Trial) + (1 + ot1 + ot2 + ot3 + ot4 | ParticipantName),
#                             data = response_time, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
model_time_sequence
library(lme4)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
# Construct model
model_time_sequence <- lmer(Elog ~ TargetC*(ot1) + (1 + ot1 | trial) + (1 + ot1 | ID),
data = response_time_e1, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
#broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "Target", dv = "Elog", model = model_time_sequence) +
theme_light()
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | ID),
data = response_time_e1, REML = FALSE)
# commented out because this many random slopes takes too long to fit for a vignette
# model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) +
#                               (1 + ot1 + ot2 + ot3 + ot4 | Trial) + (1 + ot1 + ot2 + ot3 + ot4 | ParticipantName),
#                             data = response_time, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
#broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | trial) + (1 | ID),
data = response_time_e1, REML = FALSE)
# commented out because this many random slopes takes too long to fit for a vignette
# model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) +
#                               (1 + ot1 + ot2 + ot3 + ot4 | Trial) + (1 + ot1 + ot2 + ot3 + ot4 | ParticipantName),
#                             data = response_time, REML = FALSE)
# cleanly show important parts of model (see `summary()` for more)
#broom::tidy(model_time_sequence, effects = "fixed")
tb_analysis <- analyze_time_bins(data = response_time_e1, predictor_column = "Target", test = "t.test", alpha = .05)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
tb_analysis <- analyze_time_bins(data = response_time_e1, predictor_column = "Target", test = "t.test", alpha = .05)
tb_analysis <- analyze_time_bins(data = response_time_e1, predictor_column = "Target", test = "t.test", alpha = .05)
num_sub = length(unique((response_window_clean$ParticipantName)))
num_sub = length(unique((response_window$ID)))
threshold_t = qt(p = 1 - .05/2,
df = num_sub-1) # pick threshold t based on alpha = .05 two tailed
plot(df_timeclust) +  ylab("T-Statistic") + theme_light()
df_timeclust <- make_time_cluster_data(response_time,
test= "t.test", paired=TRUE,
predictor_column = "Target",
threshold = threshold_t)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
num_sub = length(unique((response_window_e1$ID)))
df_timeclust <- make_time_cluster_data(response_time_e1,
test= "t.test", paired=TRUE,
predictor_column = "Target",
threshold = threshold_t)
plot(df_timeclust) +  ylab("T-Statistic") + theme_light()
summary(df_timeclust)
df_timeclust <- make_time_cluster_data(response_time_e1,
test= "t.test", paired=TRUE,
predictor_column = "Target",
threshold = threshold_t)
plot(df_timeclust) + ylab("T-Statistic") + theme_light()
summary(df_timeclust)
clust_analysis <- analyze_time_clusters(df_timeclust, within_subj=TRUE, paired=TRUE,
samples=150) # in practice, you should use a lot more
plot(clust_analysis) + theme_light()
summary(clust_analysis)
clust_analysis <- analyze_time_clusters(df_timeclust, within_subj=TRUE, paired=TRUE,
samples=1000) # in practice, you should use a lot more
plot(clust_analysis) + theme_light()
summary(clust_analysis)
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | trial) + (1 | ID),
data = response_time_e1, REML = FALSE)
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | trial) + (1 | ID),
data = response_time_e1, REML = FALSE)
# sum-code and center our predictor:
response_time_e1$TargetC <- ifelse(response_time_e1$Target == 'Target', .5, -.5)
response_time_e1$TargetC <- as.numeric(scale(response_time_e1$TargetC, center=TRUE, scale=FALSE))
model_time_sequence <- lmer(Elog ~ TargetC*(ot1 + ot2 + ot3 + ot4) + (1 | trial) + (1 | ID),
data = response_time_e1, REML = FALSE)
# aggregate across trials within subjects in time analysis
response_time_e1 <- make_time_sequence_data(response_window%>%filter(experiment == 1), time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 50,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
num_sub = length(unique((response_window_e1$ID)))
num_sub = length(unique((response_time_e1$ID)))
threshold_t = qt(p = 1 - .05/2,
df = num_sub-1) # pick threshold t based on alpha = .05 two tailed
df_timeclust <- make_time_cluster_data(response_time_e1,
test= "t.test", paired=TRUE,
predictor_column = "Target",
threshold = threshold_t)
plot(df_timeclust) + ylab("T-Statistic") + theme_light()
summary(df_timeclust)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj"
#summarize_by = "ID"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
# aggregate across trials within subjects in time analysis
aux <- response_window %>% filter(experiment == 1)
response_time_e1 <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj"
#summarize_by = "ID"
)
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
)
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
View(response_time_e1_byID)
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
) %>%
mutate(SamplesOutsideAOI <- SamplesTotal-SamplesInAOI)
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
) %>%
mutate(SamplesOutsideAOI <- SamplesTotal-SamplesInAOI) %>%
mutatE(DiffScore <- (SamplesInAOI-SamplesOutsideAOI)/(SamplesInAOI+SamplesOutsideAOI))
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
) %>%
mutate(SamplesOutsideAOI <- SamplesTotal-SamplesInAOI) %>%
mutate(DiffScore <- (SamplesInAOI-SamplesOutsideAOI)/(SamplesInAOI+SamplesOutsideAOI))
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
) %>%
mutate(SamplesOutsideAOI = SamplesTotal-SamplesInAOI) %>%
mutate(DiffScore <- (SamplesInAOI-SamplesOutsideAOI)/(SamplesInAOI+SamplesOutsideAOI))
response_time_e1_byID <- make_time_sequence_data(aux, time_bin_size = 100,
predictor_columns = c("Target"),
aois = "ActedObj",
summarize_by = "ID"
) %>%
mutate(SamplesOutsideAOI = SamplesTotal-SamplesInAOI) %>%
mutate(DiffScore = (SamplesInAOI-SamplesOutsideAOI)/(SamplesInAOI+SamplesOutsideAOI))
# visualize time results
plot(response_time_e1, predictor_column = "Target") +
theme_light() +
coord_cartesian(ylim = c(0,1))
results %>%
group_by(sample, experiment, trialtype) %>%
mutate(experiment = as.factor(experiment)) %>%
filter(missingdata == 0) %>%
summarize(tghit = mean(tghit, na.rm = TRUE), dthit = mean(dthit, na.rm = TRUE)) %>%
mutate(df = (tghit-dthit)/(tghit + dthit)) %>%
ggplot(aes(x = sample, y = df, color = trialtype)) +
facet_grid(. ~ experiment) +
stat_smooth() +
ggtitle(label = "Reviewer")
plotresults <- results %>%
filter(missingdata == 0) %>%
group_by(sample, experiment, trialtype, ID) %>%
mutate(experiment = as.factor(experiment)) %>%
mutate(trial = as.factor(trial)) %>%
mutate(dfrev = (tghit-dthit)/(tghit + dthit)) %>%
mutate(df = ifelse((tghit == 0 & dthit == 0),0,(tghit-dthit)/(tghit + dthit)))
ggplot(data=plotresults,aes(x = sample, y = df, color = trialtype)) +
facet_wrap(. ~ experiment, ncol = 4) +
stat_smooth() +
ggtitle(label = "Basia (smoothed mean as in the reviewer's plot)")
auxplot <- plotresults %>%
group_by(sample, experiment, trialtype) %>%
get_summary_stats(df, type = "mean_se")
ggplot(data=auxplot,aes(x = sample, y = mean, color = trialtype)) +
facet_wrap(. ~ experiment, ncol = 2) +
geom_line() +
geom_ribbon(aes(ymin = mean - se, ymax = mean + se, fill = trialtype), alpha = 0.2, colour = NA) +
geom_vline(xintercept = 0) +
ggtitle(label="Basia (nonsmoothed mean)")
